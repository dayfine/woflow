{"dependencies":[{"name":"babel-runtime/helpers/defineProperty","loc":{"line":7,"column":31}},{"name":"babel-runtime/helpers/objectWithoutProperties","loc":{"line":11,"column":40}},{"name":"babel-runtime/helpers/extends","loc":{"line":15,"column":24}},{"name":"babel-runtime/helpers/toConsumableArray","loc":{"line":19,"column":34}},{"name":"babel-runtime/core-js/object/get-prototype-of","loc":{"line":23,"column":30}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":27,"column":31}},{"name":"babel-runtime/helpers/createClass","loc":{"line":31,"column":28}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":35,"column":42}},{"name":"babel-runtime/helpers/inherits","loc":{"line":39,"column":25}},{"name":"react","loc":{"line":43,"column":21}},{"name":"prop-types","loc":{"line":47,"column":25}},{"name":"classnames","loc":{"line":51,"column":26}},{"name":"keycode","loc":{"line":55,"column":23}},{"name":"warning","loc":{"line":59,"column":23}},{"name":"../Menu/Menu","loc":{"line":63,"column":20}},{"name":"../Input/Input","loc":{"line":67,"column":21}},{"name":"../svg-icons/ArrowDropDown","loc":{"line":69,"column":29}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _Menu = require('../Menu/Menu');\n\nvar _Menu2 = _interopRequireDefault(_Menu);\n\nvar _Input = require('../Input/Input');\n\nvar _ArrowDropDown = require('../svg-icons/ArrowDropDown');\n\nvar _ArrowDropDown2 = _interopRequireDefault(_ArrowDropDown);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * @ignore - internal component.\n */\nvar SelectInput = function (_React$Component) {\n  (0, _inherits3.default)(SelectInput, _React$Component);\n\n  function SelectInput() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, SelectInput);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = SelectInput.__proto__ || (0, _getPrototypeOf2.default)(SelectInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      anchorEl: null,\n      open: false\n    }, _this.ignoreNextBlur = false, _this.handleClick = function (event) {\n      // Opening the menu is going to blur the. It will be focused back when closed.\n      _this.ignoreNextBlur = true;\n      _this.setState({\n        open: true,\n        anchorEl: event.currentTarget\n      });\n    }, _this.handleClose = function () {\n      _this.setState({\n        open: false\n      });\n    }, _this.handleItemClick = function (child) {\n      return function (event) {\n        if (!_this.props.multiple) {\n          _this.setState({\n            open: false\n          });\n        }\n\n        if (_this.props.onChange) {\n          var _this$props = _this.props,\n              onChange = _this$props.onChange,\n              name = _this$props.name;\n\n          var value = void 0;\n          var _target = void 0;\n\n          if (event.target) {\n            _target = event.target;\n          }\n\n          if (_this.props.multiple) {\n            value = Array.isArray(_this.props.value) ? [].concat((0, _toConsumableArray3.default)(_this.props.value)) : [];\n            var itemIndex = value.indexOf(child.props.value);\n            if (itemIndex === -1) {\n              value.push(child.props.value);\n            } else {\n              value.splice(itemIndex, 1);\n            }\n          } else {\n            value = child.props.value;\n          }\n\n          event.persist();\n          event.target = (0, _extends3.default)({}, _target, { value: value, name: name });\n\n          onChange(event, child);\n        }\n      };\n    }, _this.handleBlur = function (event) {\n      if (_this.ignoreNextBlur === true) {\n        // The parent components are relying on the bubbling of the event.\n        event.stopPropagation();\n        _this.ignoreNextBlur = false;\n        return;\n      }\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n    }, _this.handleKeyDown = function (event) {\n      if (_this.props.readOnly) {\n        return;\n      }\n\n      if (['space', 'up', 'down'].includes((0, _keycode2.default)(event))) {\n        event.preventDefault();\n        // Opening the menu is going to blur the. It will be focused back when closed.\n        _this.ignoreNextBlur = true;\n        _this.setState({\n          open: true,\n          anchorEl: event.currentTarget\n        });\n      }\n    }, _this.handleSelectRef = function (node) {\n      if (!_this.props.selectRef) {\n        return;\n      }\n\n      _this.props.selectRef({\n        node: node,\n        // By pass the native input as we expose a rich object (array).\n        value: _this.props.value\n      });\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(SelectInput, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          autoWidth = _props.autoWidth,\n          children = _props.children,\n          classes = _props.classes,\n          classNameProp = _props.className,\n          disabled = _props.disabled,\n          displayEmpty = _props.displayEmpty,\n          _props$MenuProps = _props.MenuProps,\n          MenuProps = _props$MenuProps === undefined ? {} : _props$MenuProps,\n          multiple = _props.multiple,\n          name = _props.name,\n          native = _props.native,\n          onBlur = _props.onBlur,\n          onChange = _props.onChange,\n          onFocus = _props.onFocus,\n          readOnly = _props.readOnly,\n          renderValue = _props.renderValue,\n          selectRef = _props.selectRef,\n          value = _props.value,\n          other = (0, _objectWithoutProperties3.default)(_props, ['autoWidth', 'children', 'classes', 'className', 'disabled', 'displayEmpty', 'MenuProps', 'multiple', 'name', 'native', 'onBlur', 'onChange', 'onFocus', 'readOnly', 'renderValue', 'selectRef', 'value']);\n\n      if (native) {\n        \"development\" !== \"production\" ? (0, _warning2.default)(multiple === false, 'Material-UI: you can not use the `native` and `multiple` properties ' + 'at the same time on a `Select` component.') : void 0;\n        \"development\" !== \"production\" ? (0, _warning2.default)(!renderValue, 'Material-UI: the `renderValue` property is not used by the native implementation.') : void 0;\n        \"development\" !== \"production\" ? (0, _warning2.default)(!displayEmpty, 'Material-UI: the `displayEmpty` property is not used by the native implementation.') : void 0;\n\n        return _react2.default.createElement('div', { className: classes.root }, _react2.default.createElement('select', (0, _extends3.default)({\n          className: (0, _classnames2.default)(classes.select, (0, _defineProperty3.default)({}, classes.disabled, disabled), classNameProp),\n          name: name,\n          disabled: disabled,\n          onBlur: onBlur,\n          onChange: onChange,\n          onFocus: onFocus,\n          value: value,\n          readOnly: readOnly,\n          ref: selectRef\n        }, other), children), _react2.default.createElement(_ArrowDropDown2.default, { className: classes.icon }));\n      }\n\n      if (value === undefined) {\n        throw new Error('Material-UI: the `value` property is required ' + 'when using the `Select` component with `native=false`.');\n      }\n\n      var display = void 0;\n      var displaySingle = '';\n      var displayMultiple = [];\n      var computeDisplay = false;\n\n      // No need to display any value if the field is empty.\n      if ((0, _Input.isDirty)(this.props) || displayEmpty) {\n        if (renderValue) {\n          display = renderValue(value);\n        } else {\n          computeDisplay = true;\n        }\n      }\n\n      var items = _react2.default.Children.map(children, function (child) {\n        if (!_react2.default.isValidElement(child)) {\n          return null;\n        }\n        var selected = void 0;\n\n        if (multiple) {\n          if (!Array.isArray(value)) {\n            throw new Error('Material-UI: the `value` property must be an array ' + 'when using the `Select` component with `multiple`.');\n          }\n\n          selected = value.indexOf(child.props.value) !== -1;\n          if (selected && computeDisplay) {\n            displayMultiple.push(child.props.children);\n          }\n        } else {\n          selected = value === child.props.value;\n          if (selected && computeDisplay) {\n            displaySingle = child.props.children;\n          }\n        }\n\n        return _react2.default.cloneElement(child, {\n          role: 'option',\n          selected: selected,\n          onClick: _this2.handleItemClick(child)\n        });\n      });\n\n      if (computeDisplay) {\n        display = multiple ? displayMultiple.join(', ') : displaySingle;\n      }\n\n      var minimumMenuWidth = this.state.anchorEl != null && !autoWidth ? this.state.anchorEl.clientWidth : undefined;\n\n      return _react2.default.createElement('div', { className: classes.root }, _react2.default.createElement('div', {\n        className: (0, _classnames2.default)(classes.select, classes.selectMenu, (0, _defineProperty3.default)({}, classes.disabled, disabled), classNameProp),\n\n        'aria-pressed': this.state.open ? 'true' : 'false',\n        tabIndex: disabled ? null : 0,\n        role: 'button',\n        'aria-owns': this.state.open ? 'menu-' + (name || '') : null,\n        'aria-haspopup': 'true',\n        onKeyDown: this.handleKeyDown,\n        onBlur: this.handleBlur,\n        onClick: disabled || readOnly ? null : this.handleClick,\n        onFocus: onFocus\n      }, display), _react2.default.createElement('input', (0, _extends3.default)({\n        value: Array.isArray(value) ? value.join(',') : value,\n        name: name,\n        readOnly: readOnly\n      }, other, {\n        ref: this.handleSelectRef,\n        type: 'hidden'\n      })), _react2.default.createElement(_ArrowDropDown2.default, { className: classes.icon }), _react2.default.createElement(_Menu2.default, (0, _extends3.default)({\n        id: 'menu-' + (name || ''),\n        anchorEl: this.state.anchorEl,\n        open: this.state.open,\n        onClose: this.handleClose\n      }, MenuProps, {\n        MenuListProps: (0, _extends3.default)({}, MenuProps.MenuListProps, {\n          role: 'listbox'\n        }),\n        PaperProps: (0, _extends3.default)({}, MenuProps.PaperProps, {\n          style: (0, _extends3.default)({\n            minWidth: minimumMenuWidth\n          }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)\n        })\n      }), items));\n    }\n  }]);\n  return SelectInput;\n}(_react2.default.Component);\n\nSelectInput.propTypes = \"development\" !== \"production\" ? {\n  /**\n   * If true, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: _propTypes2.default.bool,\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   */\n  children: _propTypes2.default.node,\n  /**\n   * Useful to extend the style applied to components.\n   */\n  classes: _propTypes2.default.object.isRequired,\n  /**\n   * The CSS class name of the select element.\n   */\n  className: _propTypes2.default.string,\n  /**\n   * If `true`, the select will be disabled.\n   */\n  disabled: _propTypes2.default.bool,\n  /**\n   * If `true`, the selected item is displayed even if its value is empty.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  displayEmpty: _propTypes2.default.bool,\n  /**\n   * Properties applied to the `Menu` element.\n   */\n  MenuProps: _propTypes2.default.object,\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  multiple: _propTypes2.default.bool,\n  /**\n   * Name attribute of the `select` or hidden `input` element.\n   */\n  name: _propTypes2.default.string,\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: _propTypes2.default.bool,\n  /**\n   * @ignore\n   */\n  onBlur: _propTypes2.default.func,\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback\n   * @param {object} child The react element that was selected\n   */\n  onChange: _propTypes2.default.func,\n  /**\n   * @ignore\n   */\n  onFocus: _propTypes2.default.func,\n  /**\n   * @ignore\n   */\n  readOnly: _propTypes2.default.bool,\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  renderValue: _propTypes2.default.func,\n  /**\n   * Use that property to pass a ref callback to the native select element.\n   */\n  selectRef: _propTypes2.default.func,\n  /**\n   * The value of the component, required for a controlled component.\n   */\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))])\n} : {};\n\nSelectInput.muiName = 'SelectInput';\n\nexports.default = SelectInput;"},"hash":"a56cc30bf1d804a1014b24aaf74f0a2e"}