{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":8,"column":24}},{"name":"babel-runtime/helpers/defineProperty","loc":{"line":12,"column":31}},{"name":"babel-runtime/helpers/objectWithoutProperties","loc":{"line":16,"column":40}},{"name":"babel-runtime/core-js/object/get-prototype-of","loc":{"line":20,"column":30}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":24,"column":31}},{"name":"babel-runtime/helpers/createClass","loc":{"line":28,"column":28}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":32,"column":42}},{"name":"babel-runtime/helpers/inherits","loc":{"line":36,"column":25}},{"name":"react","loc":{"line":44,"column":21}},{"name":"prop-types","loc":{"line":48,"column":25}},{"name":"classnames","loc":{"line":52,"column":26}},{"name":"../styles/withStyles","loc":{"line":56,"column":26}},{"name":"../utils/reactHelpers","loc":{"line":60,"column":28}},{"name":"./Textarea","loc":{"line":62,"column":24}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styles = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nexports.hasValue = hasValue;\nexports.isDirty = isDirty;\nexports.isAdornedStart = isAdornedStart;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _withStyles = require('../styles/withStyles');\n\nvar _withStyles2 = _interopRequireDefault(_withStyles);\n\nvar _reactHelpers = require('../utils/reactHelpers');\n\nvar _Textarea = require('./Textarea');\n\nvar _Textarea2 = _interopRequireDefault(_Textarea);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n// Supports determination of isControlled().\n// Controlled input accepts its current value as a prop.\n//\n// @see https://facebook.github.io/react/docs/forms.html#controlled-components\n// @param value\n// @returns {boolean} true if string (including '') or number (including zero)\nfunction hasValue(value) {\n  return value !== undefined && value !== null && !(Array.isArray(value) && value.length === 0);\n}\n\n// Determine if field is dirty (a.k.a. filled).\n//\n// Response determines if label is presented above field or as placeholder.\n//\n// @param obj\n// @param SSR\n// @returns {boolean} False when not present or empty string.\n//                    True when any number or string with length.\nfunction isDirty(obj) {\n  var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');\n}\n\n// Determine if an Input is adorned on start.\n// It's corresponding to the left with LTR.\n//\n// @param obj\n// @returns {boolean} False when no adornments.\n//                    True when adorned at the start.\nfunction isAdornedStart(obj) {\n  return obj.startAdornment;\n}\n\nvar styles = exports.styles = function styles(theme) {\n  var placeholder = {\n    color: 'currentColor',\n    opacity: theme.palette.type === 'light' ? 0.42 : 0.5,\n    transition: theme.transitions.create('opacity', {\n      duration: theme.transitions.duration.shorter,\n      easing: theme.transitions.easing.ease\n    })\n  };\n  var placeholderHidden = {\n    opacity: 0\n  };\n  var placeholderVisible = {\n    opacity: theme.palette.type === 'light' ? 0.42 : 0.5\n  };\n\n  return {\n    root: {\n      // Mimics the default input display property used by browsers for an input.\n      display: 'inline-flex',\n      alignItems: 'baseline',\n      position: 'relative',\n      fontFamily: theme.typography.fontFamily,\n      color: theme.palette.input.inputText,\n      fontSize: theme.typography.pxToRem(16)\n    },\n    formControl: {\n      'label + &': {\n        marginTop: theme.spacing.unit * 2\n      }\n    },\n    inkbar: {\n      '&:after': {\n        backgroundColor: theme.palette.primary[theme.palette.type === 'light' ? 'A700' : 'A200'],\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\"',\n        height: 2,\n        position: 'absolute',\n        right: 0,\n        transform: 'scaleX(0)',\n        transition: theme.transitions.create('transform', {\n          duration: theme.transitions.duration.shorter,\n          easing: theme.transitions.easing.easeOut\n        }),\n        pointerEvents: 'none' // Transparent to the hover style.\n      },\n      '&$focused:after': {\n        transform: 'scaleX(1)'\n      }\n    },\n    error: {\n      '&:after': {\n        backgroundColor: theme.palette.error.A400,\n        transform: 'scaleX(1)' // error is always underlined in red\n      }\n    },\n    focused: {},\n    disabled: {\n      color: theme.palette.text.disabled\n    },\n    underline: {\n      '&:before': {\n        backgroundColor: theme.palette.input.bottomLine,\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\"',\n        height: 1,\n        position: 'absolute',\n        right: 0,\n        transition: theme.transitions.create('background-color', {\n          duration: theme.transitions.duration.shorter,\n          easing: theme.transitions.easing.ease\n        }),\n        pointerEvents: 'none' // Transparent to the hover style.\n      },\n      '&:hover:not($disabled):before': {\n        backgroundColor: theme.palette.text.primary,\n        height: 2\n      },\n      '&$disabled:before': {\n        background: 'transparent',\n        backgroundImage: 'linear-gradient(to right, ' + theme.palette.input.bottomLine + ' 33%, transparent 0%)',\n        backgroundPosition: 'left top',\n        backgroundRepeat: 'repeat-x',\n        backgroundSize: '5px 1px'\n      }\n    },\n    multiline: {\n      padding: theme.spacing.unit - 2 + 'px 0 ' + (theme.spacing.unit - 1) + 'px'\n    },\n    fullWidth: {\n      width: '100%'\n    },\n    input: {\n      font: 'inherit',\n      color: 'currentColor',\n      padding: theme.spacing.unit - 2 + 'px 0 ' + (theme.spacing.unit - 1) + 'px',\n      border: 0,\n      boxSizing: 'content-box',\n      verticalAlign: 'middle',\n      background: 'none',\n      margin: 0, // Reset for Safari\n      // Remove grey highlight\n      WebkitTapHighlightColor: theme.palette.common.transparent,\n      display: 'block',\n      // Make the flex item shrink with Firefox\n      minWidth: 0,\n      width: '100%',\n      '&::-webkit-input-placeholder': placeholder,\n      '&::-moz-placeholder': placeholder, // Firefox 19+\n      '&:-ms-input-placeholder': placeholder, // IE 11\n      '&::-ms-input-placeholder': placeholder, // Edge\n      '&:focus': {\n        outline: 0\n      },\n      // Reset Firefox invalid required input style\n      '&:invalid': {\n        boxShadow: 'none'\n      },\n      '&::-webkit-search-decoration': {\n        // Remove the padding when type=search.\n        appearance: 'none'\n      },\n      // Show and hide the placeholder logic\n      'label[data-shrink=false] + $formControl &': {\n        '&::-webkit-input-placeholder': placeholderHidden,\n        '&::-moz-placeholder': placeholderHidden, // Firefox 19+\n        '&:-ms-input-placeholder': placeholderHidden, // IE 11\n        '&::-ms-input-placeholder': placeholderHidden, // Edge\n        '&:focus::-webkit-input-placeholder': placeholderVisible,\n        '&:focus::-moz-placeholder': placeholderVisible, // Firefox 19+\n        '&:focus:-ms-input-placeholder': placeholderVisible, // IE 11\n        '&:focus::-ms-input-placeholder': placeholderVisible // Edge\n      }\n    },\n    inputDense: {\n      paddingTop: theme.spacing.unit / 2 - 1\n    },\n    inputDisabled: {\n      opacity: 1 // Reset iOS opacity\n    },\n    inputSingleline: {\n      height: '1.1875em' // Reset (19px)\n    },\n    inputMultiline: {\n      resize: 'none',\n      padding: 0\n    },\n    inputSearch: {\n      appearance: 'textfield' // Improve type search style.\n    }\n  };\n};\n\nfunction formControlState(props, context) {\n  var disabled = props.disabled;\n  var error = props.error;\n  var margin = props.margin;\n\n  if (context.muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = context.muiFormControl.disabled;\n    }\n\n    if (typeof error === 'undefined') {\n      error = context.muiFormControl.error;\n    }\n\n    if (typeof margin === 'undefined') {\n      margin = context.muiFormControl.margin;\n    }\n  }\n\n  return {\n    disabled: disabled,\n    error: error,\n    margin: margin\n  };\n}\n\nvar Input = function (_React$Component) {\n  (0, _inherits3.default)(Input, _React$Component);\n\n  function Input() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, Input);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Input.__proto__ || (0, _getPrototypeOf2.default)(Input)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      focused: false\n    }, _this.input = null, _this.handleFocus = function (event) {\n      // Fix an bug with IE11 where the focus/blur events are triggered\n      // while the input is disabled.\n      if (formControlState(_this.props, _this.context).disabled) {\n        event.stopPropagation();\n        return;\n      }\n\n      _this.setState({ focused: true });\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n    }, _this.handleBlur = function (event) {\n      _this.setState({ focused: false });\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n    }, _this.handleChange = function (event) {\n      if (!_this.isControlled()) {\n        _this.checkDirty(_this.input);\n      }\n\n      // Perform in the willUpdate\n      if (_this.props.onChange) {\n        _this.props.onChange(event);\n      }\n    }, _this.handleRefInput = function (node) {\n      _this.input = node;\n      if (_this.props.inputRef) {\n        _this.props.inputRef(node);\n      } else if (_this.props.inputProps && _this.props.inputProps.ref) {\n        _this.props.inputProps.ref(node);\n      }\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(Input, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      if (this.isControlled()) {\n        this.checkDirty(this.props);\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (!this.isControlled()) {\n        this.checkDirty(this.input);\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      // The blur won't fire when the disabled state is set on a focused input.\n      // We need to book keep the focused state manually.\n      if (!formControlState(this.props, this.context).disabled && formControlState(nextProps, nextContext).disabled) {\n        this.setState({\n          focused: false\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps, nextState, nextContext) {\n      if (this.isControlled(nextProps)) {\n        this.checkDirty(nextProps);\n      } // else performed in the onChange\n\n      // Book keep the focused state.\n      if (!formControlState(this.props, this.context).disabled && formControlState(nextProps, nextContext).disabled) {\n        var muiFormControl = this.context.muiFormControl;\n\n        if (muiFormControl && muiFormControl.onBlur) {\n          muiFormControl.onBlur();\n        }\n      }\n    }\n\n    // Holds the input reference\n\n  }, {\n    key: 'isControlled',\n\n    // A controlled input accepts its current value as a prop.\n    //\n    // @see https://facebook.github.io/react/docs/forms.html#controlled-components\n    // @returns {boolean} true if string (including '') or number (including zero)\n    value: function isControlled() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      return hasValue(props.value);\n    }\n  }, {\n    key: 'checkDirty',\n    value: function checkDirty(obj) {\n      var muiFormControl = this.context.muiFormControl;\n\n      if (isDirty(obj)) {\n        if (muiFormControl && muiFormControl.onDirty) {\n          muiFormControl.onDirty();\n        }\n        if (this.props.onDirty) {\n          this.props.onDirty();\n        }\n        return;\n      }\n\n      if (muiFormControl && muiFormControl.onClean) {\n        muiFormControl.onClean();\n      }\n      if (this.props.onClean) {\n        this.props.onClean();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames, _classNames2;\n\n      var _props = this.props,\n          autoComplete = _props.autoComplete,\n          autoFocus = _props.autoFocus,\n          classes = _props.classes,\n          classNameProp = _props.className,\n          defaultValue = _props.defaultValue,\n          disabledProp = _props.disabled,\n          disableUnderline = _props.disableUnderline,\n          endAdornment = _props.endAdornment,\n          errorProp = _props.error,\n          fullWidth = _props.fullWidth,\n          id = _props.id,\n          inputComponent = _props.inputComponent,\n          _props$inputProps = _props.inputProps;\n      _props$inputProps = _props$inputProps === undefined ? {} : _props$inputProps;\n      var inputPropsClassName = _props$inputProps.className,\n          inputPropsProp = (0, _objectWithoutProperties3.default)(_props$inputProps, ['className']),\n          inputRef = _props.inputRef,\n          marginProp = _props.margin,\n          multiline = _props.multiline,\n          name = _props.name,\n          onBlur = _props.onBlur,\n          onChange = _props.onChange,\n          onClean = _props.onClean,\n          onDirty = _props.onDirty,\n          onFocus = _props.onFocus,\n          onKeyDown = _props.onKeyDown,\n          onKeyUp = _props.onKeyUp,\n          placeholder = _props.placeholder,\n          readOnly = _props.readOnly,\n          rows = _props.rows,\n          rowsMax = _props.rowsMax,\n          startAdornment = _props.startAdornment,\n          type = _props.type,\n          value = _props.value,\n          other = (0, _objectWithoutProperties3.default)(_props, ['autoComplete', 'autoFocus', 'classes', 'className', 'defaultValue', 'disabled', 'disableUnderline', 'endAdornment', 'error', 'fullWidth', 'id', 'inputComponent', 'inputProps', 'inputRef', 'margin', 'multiline', 'name', 'onBlur', 'onChange', 'onClean', 'onDirty', 'onFocus', 'onKeyDown', 'onKeyUp', 'placeholder', 'readOnly', 'rows', 'rowsMax', 'startAdornment', 'type', 'value']);\n      var muiFormControl = this.context.muiFormControl;\n\n      var _formControlState = formControlState(this.props, this.context),\n          disabled = _formControlState.disabled,\n          error = _formControlState.error,\n          margin = _formControlState.margin;\n\n      var className = (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.disabled, disabled), (0, _defineProperty3.default)(_classNames, classes.error, error), (0, _defineProperty3.default)(_classNames, classes.fullWidth, fullWidth), (0, _defineProperty3.default)(_classNames, classes.focused, this.state.focused), (0, _defineProperty3.default)(_classNames, classes.formControl, muiFormControl), (0, _defineProperty3.default)(_classNames, classes.inkbar, !disableUnderline), (0, _defineProperty3.default)(_classNames, classes.multiline, multiline), (0, _defineProperty3.default)(_classNames, classes.underline, !disableUnderline), _classNames), classNameProp);\n\n      var inputClassName = (0, _classnames2.default)(classes.input, (_classNames2 = {}, (0, _defineProperty3.default)(_classNames2, classes.inputDisabled, disabled), (0, _defineProperty3.default)(_classNames2, classes.inputSingleline, !multiline), (0, _defineProperty3.default)(_classNames2, classes.inputMultiline, multiline), (0, _defineProperty3.default)(_classNames2, classes.inputSearch, type === 'search'), (0, _defineProperty3.default)(_classNames2, classes.inputDense, margin === 'dense'), _classNames2), inputPropsClassName);\n\n      var required = muiFormControl && muiFormControl.required === true;\n\n      var InputComponent = 'input';\n      var inputProps = (0, _extends3.default)({}, inputPropsProp, {\n        ref: this.handleRefInput\n      });\n\n      if (inputComponent) {\n        InputComponent = inputComponent;\n\n        if ((0, _reactHelpers.isMuiComponent)(InputComponent, ['SelectInput'])) {\n          inputProps = (0, _extends3.default)({\n            selectRef: this.handleRefInput\n          }, inputProps, {\n            ref: null\n          });\n        }\n      } else if (multiline) {\n        if (rows && !rowsMax) {\n          InputComponent = 'textarea';\n        } else {\n          inputProps = (0, _extends3.default)({\n            rowsMax: rowsMax,\n            textareaRef: this.handleRefInput\n          }, inputProps, {\n            ref: null\n          });\n          InputComponent = _Textarea2.default;\n        }\n      }\n\n      return _react2.default.createElement('div', (0, _extends3.default)({ onBlur: this.handleBlur, onFocus: this.handleFocus, className: className }, other), startAdornment, _react2.default.createElement(InputComponent, (0, _extends3.default)({\n        autoComplete: autoComplete,\n        autoFocus: autoFocus,\n        className: inputClassName,\n        onChange: this.handleChange,\n        onKeyUp: onKeyUp,\n        onKeyDown: onKeyDown,\n        disabled: disabled,\n        required: required ? true : undefined,\n        value: value,\n        id: id,\n        name: name,\n        defaultValue: defaultValue,\n        placeholder: placeholder,\n        type: type,\n        readOnly: readOnly,\n        rows: rows\n      }, inputProps)), endAdornment);\n    }\n  }]);\n  return Input;\n}(_react2.default.Component);\n\nInput.propTypes = \"production\" !== \"production\" ? {\n  /**\n   * This property helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, it's more like an autofill.\n   * You can learn more about it in this article\n   * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n   */\n  autoComplete: _propTypes2.default.string,\n  /**\n   * If `true`, the input will be focused during the first mount.\n   */\n  autoFocus: _propTypes2.default.bool,\n  /**\n   * Useful to extend the style applied to components.\n   */\n  classes: _propTypes2.default.object.isRequired,\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: _propTypes2.default.string,\n  /**\n   * The default input value, useful when not controlling the component.\n   */\n  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: _propTypes2.default.bool,\n  /**\n   * If `true`, the input will not have an underline.\n   */\n  disableUnderline: _propTypes2.default.bool,\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: _propTypes2.default.node,\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: _propTypes2.default.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: _propTypes2.default.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: _propTypes2.default.string,\n  /**\n   * The component used for the native input.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),\n  /**\n   * Properties applied to the `input` element.\n   */\n  inputProps: _propTypes2.default.object,\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: _propTypes2.default.func,\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: _propTypes2.default.oneOf(['dense', 'none']),\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: _propTypes2.default.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: _propTypes2.default.string,\n  /**\n   * @ignore\n   */\n  onBlur: _propTypes2.default.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback\n   */\n  onChange: _propTypes2.default.func,\n  /**\n   * TODO\n   */\n  onClean: _propTypes2.default.func,\n  /**\n   * TODO\n   */\n  onDirty: _propTypes2.default.func,\n  /**\n   * @ignore\n   */\n  onFocus: _propTypes2.default.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: _propTypes2.default.func,\n  /**\n   * @ignore\n   */\n  onKeyUp: _propTypes2.default.func,\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: _propTypes2.default.string,\n  /**\n   * @ignore\n   */\n  readOnly: _propTypes2.default.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: _propTypes2.default.node,\n  /**\n   * Type of the input element. It should be a valid HTML5 input type.\n   */\n  type: _propTypes2.default.string,\n  /**\n   * The input value, required for a controlled component.\n   */\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))])\n} : {};\n\nInput.muiName = 'Input';\n\nInput.defaultProps = {\n  disableUnderline: false,\n  fullWidth: false,\n  multiline: false,\n  type: 'text'\n};\n\nInput.contextTypes = {\n  muiFormControl: _propTypes2.default.object\n};\n\nexports.default = (0, _withStyles2.default)(styles, { name: 'MuiInput' })(Input);"},"hash":"5ed01491e0b5152390e8cafec23738b4"}