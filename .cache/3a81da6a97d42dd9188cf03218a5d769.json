{"dependencies":[{"name":"lodash/defaults","loc":{"line":10,"column":24}},{"name":"./shallowEqual","loc":{"line":14,"column":28}},{"name":"./EnterLeaveCounter","loc":{"line":18,"column":33}},{"name":"./BrowserDetector","loc":{"line":22,"column":31}},{"name":"./OffsetUtils","loc":{"line":24,"column":27}},{"name":"./NativeDragSources","loc":{"line":26,"column":33}},{"name":"./NativeTypes","loc":{"line":28,"column":27}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-underscore-dangle */\n\n\nvar _defaults = require('lodash/defaults');\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nvar _shallowEqual = require('./shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nvar _EnterLeaveCounter = require('./EnterLeaveCounter');\n\nvar _EnterLeaveCounter2 = _interopRequireDefault(_EnterLeaveCounter);\n\nvar _BrowserDetector = require('./BrowserDetector');\n\nvar _OffsetUtils = require('./OffsetUtils');\n\nvar _NativeDragSources = require('./NativeDragSources');\n\nvar _NativeTypes = require('./NativeTypes');\n\nvar NativeTypes = _interopRequireWildcard(_NativeTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar HTML5Backend = function () {\n\tfunction HTML5Backend(manager) {\n\t\t_classCallCheck(this, HTML5Backend);\n\n\t\tthis.actions = manager.getActions();\n\t\tthis.monitor = manager.getMonitor();\n\t\tthis.registry = manager.getRegistry();\n\t\tthis.context = manager.getContext();\n\n\t\tthis.sourcePreviewNodes = {};\n\t\tthis.sourcePreviewNodeOptions = {};\n\t\tthis.sourceNodes = {};\n\t\tthis.sourceNodeOptions = {};\n\t\tthis.enterLeaveCounter = new _EnterLeaveCounter2.default();\n\n\t\tthis.dragStartSourceIds = [];\n\t\tthis.dropTargetIds = [];\n\t\tthis.dragEnterTargetIds = [];\n\t\tthis.currentNativeSource = null;\n\t\tthis.currentNativeHandle = null;\n\t\tthis.currentDragSourceNode = null;\n\t\tthis.currentDragSourceNodeOffset = null;\n\t\tthis.currentDragSourceNodeOffsetChanged = false;\n\t\tthis.altKeyPressed = false;\n\n\t\tthis.getSourceClientOffset = this.getSourceClientOffset.bind(this);\n\t\tthis.handleTopDragStart = this.handleTopDragStart.bind(this);\n\t\tthis.handleTopDragStartCapture = this.handleTopDragStartCapture.bind(this);\n\t\tthis.handleTopDragEndCapture = this.handleTopDragEndCapture.bind(this);\n\t\tthis.handleTopDragEnter = this.handleTopDragEnter.bind(this);\n\t\tthis.handleTopDragEnterCapture = this.handleTopDragEnterCapture.bind(this);\n\t\tthis.handleTopDragLeaveCapture = this.handleTopDragLeaveCapture.bind(this);\n\t\tthis.handleTopDragOver = this.handleTopDragOver.bind(this);\n\t\tthis.handleTopDragOverCapture = this.handleTopDragOverCapture.bind(this);\n\t\tthis.handleTopDrop = this.handleTopDrop.bind(this);\n\t\tthis.handleTopDropCapture = this.handleTopDropCapture.bind(this);\n\t\tthis.handleSelectStart = this.handleSelectStart.bind(this);\n\t\tthis.endDragIfSourceWasRemovedFromDOM = this.endDragIfSourceWasRemovedFromDOM.bind(this);\n\t\tthis.endDragNativeItem = this.endDragNativeItem.bind(this);\n\t\tthis.asyncEndDragNativeItem = this.asyncEndDragNativeItem.bind(this);\n\t\tthis.isNodeInDocument = this.isNodeInDocument.bind(this);\n\t}\n\n\t_createClass(HTML5Backend, [{\n\t\tkey: 'setup',\n\t\tvalue: function setup() {\n\t\t\tif (this.window === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.window.__isReactDndBackendSetUp) {\n\t\t\t\tthrow new Error('Cannot have two HTML5 backends at the same time.');\n\t\t\t}\n\t\t\tthis.window.__isReactDndBackendSetUp = true;\n\t\t\tthis.addEventListeners(this.window);\n\t\t}\n\t}, {\n\t\tkey: 'teardown',\n\t\tvalue: function teardown() {\n\t\t\tif (this.window === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.window.__isReactDndBackendSetUp = false;\n\t\t\tthis.removeEventListeners(this.window);\n\t\t\tthis.clearCurrentDragSourceNode();\n\t\t\tif (this.asyncEndDragFrameId) {\n\t\t\t\tthis.window.cancelAnimationFrame(this.asyncEndDragFrameId);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'addEventListeners',\n\t\tvalue: function addEventListeners(target) {\n\t\t\t// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n\t\t\tif (!target.addEventListener) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttarget.addEventListener('dragstart', this.handleTopDragStart);\n\t\t\ttarget.addEventListener('dragstart', this.handleTopDragStartCapture, true);\n\t\t\ttarget.addEventListener('dragend', this.handleTopDragEndCapture, true);\n\t\t\ttarget.addEventListener('dragenter', this.handleTopDragEnter);\n\t\t\ttarget.addEventListener('dragenter', this.handleTopDragEnterCapture, true);\n\t\t\ttarget.addEventListener('dragleave', this.handleTopDragLeaveCapture, true);\n\t\t\ttarget.addEventListener('dragover', this.handleTopDragOver);\n\t\t\ttarget.addEventListener('dragover', this.handleTopDragOverCapture, true);\n\t\t\ttarget.addEventListener('drop', this.handleTopDrop);\n\t\t\ttarget.addEventListener('drop', this.handleTopDropCapture, true);\n\t\t}\n\t}, {\n\t\tkey: 'removeEventListeners',\n\t\tvalue: function removeEventListeners(target) {\n\t\t\t// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n\t\t\tif (!target.removeEventListener) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttarget.removeEventListener('dragstart', this.handleTopDragStart);\n\t\t\ttarget.removeEventListener('dragstart', this.handleTopDragStartCapture, true);\n\t\t\ttarget.removeEventListener('dragend', this.handleTopDragEndCapture, true);\n\t\t\ttarget.removeEventListener('dragenter', this.handleTopDragEnter);\n\t\t\ttarget.removeEventListener('dragenter', this.handleTopDragEnterCapture, true);\n\t\t\ttarget.removeEventListener('dragleave', this.handleTopDragLeaveCapture, true);\n\t\t\ttarget.removeEventListener('dragover', this.handleTopDragOver);\n\t\t\ttarget.removeEventListener('dragover', this.handleTopDragOverCapture, true);\n\t\t\ttarget.removeEventListener('drop', this.handleTopDrop);\n\t\t\ttarget.removeEventListener('drop', this.handleTopDropCapture, true);\n\t\t}\n\t}, {\n\t\tkey: 'connectDragPreview',\n\t\tvalue: function connectDragPreview(sourceId, node, options) {\n\t\t\tvar _this = this;\n\n\t\t\tthis.sourcePreviewNodeOptions[sourceId] = options;\n\t\t\tthis.sourcePreviewNodes[sourceId] = node;\n\n\t\t\treturn function () {\n\t\t\t\tdelete _this.sourcePreviewNodes[sourceId];\n\t\t\t\tdelete _this.sourcePreviewNodeOptions[sourceId];\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: 'connectDragSource',\n\t\tvalue: function connectDragSource(sourceId, node, options) {\n\t\t\tvar _this2 = this;\n\n\t\t\tthis.sourceNodes[sourceId] = node;\n\t\t\tthis.sourceNodeOptions[sourceId] = options;\n\n\t\t\tvar handleDragStart = function handleDragStart(e) {\n\t\t\t\treturn _this2.handleDragStart(e, sourceId);\n\t\t\t};\n\t\t\tvar handleSelectStart = function handleSelectStart(e) {\n\t\t\t\treturn _this2.handleSelectStart(e, sourceId);\n\t\t\t};\n\n\t\t\tnode.setAttribute('draggable', true);\n\t\t\tnode.addEventListener('dragstart', handleDragStart);\n\t\t\tnode.addEventListener('selectstart', handleSelectStart);\n\n\t\t\treturn function () {\n\t\t\t\tdelete _this2.sourceNodes[sourceId];\n\t\t\t\tdelete _this2.sourceNodeOptions[sourceId];\n\n\t\t\t\tnode.removeEventListener('dragstart', handleDragStart);\n\t\t\t\tnode.removeEventListener('selectstart', handleSelectStart);\n\t\t\t\tnode.setAttribute('draggable', false);\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: 'connectDropTarget',\n\t\tvalue: function connectDropTarget(targetId, node) {\n\t\t\tvar _this3 = this;\n\n\t\t\tvar handleDragEnter = function handleDragEnter(e) {\n\t\t\t\treturn _this3.handleDragEnter(e, targetId);\n\t\t\t};\n\t\t\tvar handleDragOver = function handleDragOver(e) {\n\t\t\t\treturn _this3.handleDragOver(e, targetId);\n\t\t\t};\n\t\t\tvar handleDrop = function handleDrop(e) {\n\t\t\t\treturn _this3.handleDrop(e, targetId);\n\t\t\t};\n\n\t\t\tnode.addEventListener('dragenter', handleDragEnter);\n\t\t\tnode.addEventListener('dragover', handleDragOver);\n\t\t\tnode.addEventListener('drop', handleDrop);\n\n\t\t\treturn function () {\n\t\t\t\tnode.removeEventListener('dragenter', handleDragEnter);\n\t\t\t\tnode.removeEventListener('dragover', handleDragOver);\n\t\t\t\tnode.removeEventListener('drop', handleDrop);\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: 'getCurrentSourceNodeOptions',\n\t\tvalue: function getCurrentSourceNodeOptions() {\n\t\t\tvar sourceId = this.monitor.getSourceId();\n\t\t\tvar sourceNodeOptions = this.sourceNodeOptions[sourceId];\n\n\t\t\treturn (0, _defaults2.default)(sourceNodeOptions || {}, {\n\t\t\t\tdropEffect: this.altKeyPressed ? 'copy' : 'move'\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'getCurrentDropEffect',\n\t\tvalue: function getCurrentDropEffect() {\n\t\t\tif (this.isDraggingNativeItem()) {\n\t\t\t\t// It makes more sense to default to 'copy' for native resources\n\t\t\t\treturn 'copy';\n\t\t\t}\n\n\t\t\treturn this.getCurrentSourceNodeOptions().dropEffect;\n\t\t}\n\t}, {\n\t\tkey: 'getCurrentSourcePreviewNodeOptions',\n\t\tvalue: function getCurrentSourcePreviewNodeOptions() {\n\t\t\tvar sourceId = this.monitor.getSourceId();\n\t\t\tvar sourcePreviewNodeOptions = this.sourcePreviewNodeOptions[sourceId];\n\n\t\t\treturn (0, _defaults2.default)(sourcePreviewNodeOptions || {}, {\n\t\t\t\tanchorX: 0.5,\n\t\t\t\tanchorY: 0.5,\n\t\t\t\tcaptureDraggingState: false\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'getSourceClientOffset',\n\t\tvalue: function getSourceClientOffset(sourceId) {\n\t\t\treturn (0, _OffsetUtils.getNodeClientOffset)(this.sourceNodes[sourceId]);\n\t\t}\n\t}, {\n\t\tkey: 'isDraggingNativeItem',\n\t\tvalue: function isDraggingNativeItem() {\n\t\t\tvar itemType = this.monitor.getItemType();\n\t\t\treturn Object.keys(NativeTypes).some(function (key) {\n\t\t\t\treturn NativeTypes[key] === itemType;\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'beginDragNativeItem',\n\t\tvalue: function beginDragNativeItem(type) {\n\t\t\tthis.clearCurrentDragSourceNode();\n\n\t\t\tvar SourceType = (0, _NativeDragSources.createNativeDragSource)(type);\n\t\t\tthis.currentNativeSource = new SourceType();\n\t\t\tthis.currentNativeHandle = this.registry.addSource(type, this.currentNativeSource);\n\t\t\tthis.actions.beginDrag([this.currentNativeHandle]);\n\n\t\t\t// On Firefox, if mouseover fires, the drag is over but browser failed to tell us.\n\t\t\t// See https://bugzilla.mozilla.org/show_bug.cgi?id=656164\n\t\t\t// This is not true for other browsers.\n\t\t\tif ((0, _BrowserDetector.isFirefox)()) {\n\t\t\t\tthis.window.addEventListener('mouseover', this.asyncEndDragNativeItem, true);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'asyncEndDragNativeItem',\n\t\tvalue: function asyncEndDragNativeItem() {\n\t\t\tthis.asyncEndDragFrameId = this.window.requestAnimationFrame(this.endDragNativeItem);\n\t\t\tif ((0, _BrowserDetector.isFirefox)()) {\n\t\t\t\tthis.window.removeEventListener('mouseover', this.asyncEndDragNativeItem, true);\n\t\t\t\tthis.enterLeaveCounter.reset();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'endDragNativeItem',\n\t\tvalue: function endDragNativeItem() {\n\t\t\tif (!this.isDraggingNativeItem()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.actions.endDrag();\n\t\t\tthis.registry.removeSource(this.currentNativeHandle);\n\t\t\tthis.currentNativeHandle = null;\n\t\t\tthis.currentNativeSource = null;\n\t\t}\n\t}, {\n\t\tkey: 'isNodeInDocument',\n\t\tvalue: function isNodeInDocument(node) {\n\t\t\t// Check the node either in the main document or in the current context\n\t\t\treturn document.body.contains(node) || this.window ? this.window.document.body.contains(node) : false;\n\t\t}\n\t}, {\n\t\tkey: 'endDragIfSourceWasRemovedFromDOM',\n\t\tvalue: function endDragIfSourceWasRemovedFromDOM() {\n\t\t\tvar node = this.currentDragSourceNode;\n\t\t\tif (this.isNodeInDocument(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.clearCurrentDragSourceNode()) {\n\t\t\t\tthis.actions.endDrag();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'setCurrentDragSourceNode',\n\t\tvalue: function setCurrentDragSourceNode(node) {\n\t\t\tthis.clearCurrentDragSourceNode();\n\t\t\tthis.currentDragSourceNode = node;\n\t\t\tthis.currentDragSourceNodeOffset = (0, _OffsetUtils.getNodeClientOffset)(node);\n\t\t\tthis.currentDragSourceNodeOffsetChanged = false;\n\n\t\t\t// Receiving a mouse event in the middle of a dragging operation\n\t\t\t// means it has ended and the drag source node disappeared from DOM,\n\t\t\t// so the browser didn't dispatch the dragend event.\n\t\t\tthis.window.addEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);\n\t\t}\n\t}, {\n\t\tkey: 'clearCurrentDragSourceNode',\n\t\tvalue: function clearCurrentDragSourceNode() {\n\t\t\tif (this.currentDragSourceNode) {\n\t\t\t\tthis.currentDragSourceNode = null;\n\t\t\t\tthis.currentDragSourceNodeOffset = null;\n\t\t\t\tthis.currentDragSourceNodeOffsetChanged = false;\n\t\t\t\tthis.window.removeEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}, {\n\t\tkey: 'checkIfCurrentDragSourceRectChanged',\n\t\tvalue: function checkIfCurrentDragSourceRectChanged() {\n\t\t\tvar node = this.currentDragSourceNode;\n\t\t\tif (!node) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.currentDragSourceNodeOffsetChanged) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tthis.currentDragSourceNodeOffsetChanged = !(0, _shallowEqual2.default)((0, _OffsetUtils.getNodeClientOffset)(node), this.currentDragSourceNodeOffset);\n\n\t\t\treturn this.currentDragSourceNodeOffsetChanged;\n\t\t}\n\t}, {\n\t\tkey: 'handleTopDragStartCapture',\n\t\tvalue: function handleTopDragStartCapture() {\n\t\t\tthis.clearCurrentDragSourceNode();\n\t\t\tthis.dragStartSourceIds = [];\n\t\t}\n\t}, {\n\t\tkey: 'handleDragStart',\n\t\tvalue: function handleDragStart(e, sourceId) {\n\t\t\tthis.dragStartSourceIds.unshift(sourceId);\n\t\t}\n\t}, {\n\t\tkey: 'handleTopDragStart',\n\t\tvalue: function handleTopDragStart(e) {\n\t\t\tvar _this4 = this;\n\n\t\t\tvar dragStartSourceIds = this.dragStartSourceIds;\n\n\t\t\tthis.dragStartSourceIds = null;\n\n\t\t\tvar clientOffset = (0, _OffsetUtils.getEventClientOffset)(e);\n\n\t\t\t// Avoid crashing if we missed a drop event or our previous drag died\n\t\t\tif (this.monitor.isDragging()) {\n\t\t\t\tthis.actions.endDrag();\n\t\t\t}\n\n\t\t\t// Don't publish the source just yet (see why below)\n\t\t\tthis.actions.beginDrag(dragStartSourceIds, {\n\t\t\t\tpublishSource: false,\n\t\t\t\tgetSourceClientOffset: this.getSourceClientOffset,\n\t\t\t\tclientOffset: clientOffset\n\t\t\t});\n\n\t\t\tvar dataTransfer = e.dataTransfer;\n\n\t\t\tvar nativeType = (0, _NativeDragSources.matchNativeItemType)(dataTransfer);\n\n\t\t\tif (this.monitor.isDragging()) {\n\t\t\t\tif (typeof dataTransfer.setDragImage === 'function') {\n\t\t\t\t\t// Use custom drag image if user specifies it.\n\t\t\t\t\t// If child drag source refuses drag but parent agrees,\n\t\t\t\t\t// use parent's node as drag image. Neither works in IE though.\n\t\t\t\t\tvar sourceId = this.monitor.getSourceId();\n\t\t\t\t\tvar sourceNode = this.sourceNodes[sourceId];\n\t\t\t\t\tvar dragPreview = this.sourcePreviewNodes[sourceId] || sourceNode;\n\n\t\t\t\t\tvar _getCurrentSourcePrev = this.getCurrentSourcePreviewNodeOptions(),\n\t\t\t\t\t    anchorX = _getCurrentSourcePrev.anchorX,\n\t\t\t\t\t    anchorY = _getCurrentSourcePrev.anchorY,\n\t\t\t\t\t    offsetX = _getCurrentSourcePrev.offsetX,\n\t\t\t\t\t    offsetY = _getCurrentSourcePrev.offsetY;\n\n\t\t\t\t\tvar anchorPoint = { anchorX: anchorX, anchorY: anchorY };\n\t\t\t\t\tvar offsetPoint = { offsetX: offsetX, offsetY: offsetY };\n\t\t\t\t\tvar dragPreviewOffset = (0, _OffsetUtils.getDragPreviewOffset)(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint);\n\n\t\t\t\t\tdataTransfer.setDragImage(dragPreview, dragPreviewOffset.x, dragPreviewOffset.y);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Firefox won't drag without setting data\n\t\t\t\t\tdataTransfer.setData('application/json', {});\n\t\t\t\t} catch (err) {}\n\t\t\t\t// IE doesn't support MIME types in setData\n\n\n\t\t\t\t// Store drag source node so we can check whether\n\t\t\t\t// it is removed from DOM and trigger endDrag manually.\n\t\t\t\tthis.setCurrentDragSourceNode(e.target);\n\n\t\t\t\t// Now we are ready to publish the drag source.. or are we not?\n\n\t\t\t\tvar _getCurrentSourcePrev2 = this.getCurrentSourcePreviewNodeOptions(),\n\t\t\t\t    captureDraggingState = _getCurrentSourcePrev2.captureDraggingState;\n\n\t\t\t\tif (!captureDraggingState) {\n\t\t\t\t\t// Usually we want to publish it in the next tick so that browser\n\t\t\t\t\t// is able to screenshot the current (not yet dragging) state.\n\t\t\t\t\t//\n\t\t\t\t\t// It also neatly avoids a situation where render() returns null\n\t\t\t\t\t// in the same tick for the source element, and browser freaks out.\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\treturn _this4.actions.publishDragSource();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// In some cases the user may want to override this behavior, e.g.\n\t\t\t\t\t// to work around IE not supporting custom drag previews.\n\t\t\t\t\t//\n\t\t\t\t\t// When using a custom drag layer, the only way to prevent\n\t\t\t\t\t// the default drag preview from drawing in IE is to screenshot\n\t\t\t\t\t// the dragging state in which the node itself has zero opacity\n\t\t\t\t\t// and height. In this case, though, returning null from render()\n\t\t\t\t\t// will abruptly end the dragging, which is not obvious.\n\t\t\t\t\t//\n\t\t\t\t\t// This is the reason such behavior is strictly opt-in.\n\t\t\t\t\tthis.actions.publishDragSource();\n\t\t\t\t}\n\t\t\t} else if (nativeType) {\n\t\t\t\t// A native item (such as URL) dragged from inside the document\n\t\t\t\tthis.beginDragNativeItem(nativeType);\n\t\t\t} else if (!dataTransfer.types && (!e.target.hasAttribute || !e.target.hasAttribute('draggable'))) {\n\t\t\t\t// Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.\n\t\t\t\t// Just let it drag. It's a native type (URL or text) and will be picked up in\n\t\t\t\t// dragenter handler.\n\t\t\t\treturn; // eslint-disable-line no-useless-return\n\t\t\t} else {\n\t\t\t\t// If by this time no drag source reacted, tell browser not to drag.\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'handleTopDragEndCapture',\n\t\tvalue: function handleTopDragEndCapture() {\n\t\t\tif (this.clearCurrentDragSourceNode()) {\n\t\t\t\t// Firefox can dispatch this event in an infinite loop\n\t\t\t\t// if dragend handler does something like showing an alert.\n\t\t\t\t// Only proceed if we have not handled it already.\n\t\t\t\tthis.actions.endDrag();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'handleTopDragEnterCapture',\n\t\tvalue: function handleTopDragEnterCapture(e) {\n\t\t\tthis.dragEnterTargetIds = [];\n\n\t\t\tvar isFirstEnter = this.enterLeaveCounter.enter(e.target);\n\t\t\tif (!isFirstEnter || this.monitor.isDragging()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar dataTransfer = e.dataTransfer;\n\n\t\t\tvar nativeType = (0, _NativeDragSources.matchNativeItemType)(dataTransfer);\n\n\t\t\tif (nativeType) {\n\t\t\t\t// A native item (such as file or URL) dragged from outside the document\n\t\t\t\tthis.beginDragNativeItem(nativeType);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'handleDragEnter',\n\t\tvalue: function handleDragEnter(e, targetId) {\n\t\t\tthis.dragEnterTargetIds.unshift(targetId);\n\t\t}\n\t}, {\n\t\tkey: 'handleTopDragEnter',\n\t\tvalue: function handleTopDragEnter(e) {\n\t\t\tvar _this5 = this;\n\n\t\t\tvar dragEnterTargetIds = this.dragEnterTargetIds;\n\n\t\t\tthis.dragEnterTargetIds = [];\n\n\t\t\tif (!this.monitor.isDragging()) {\n\t\t\t\t// This is probably a native item type we don't understand.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.altKeyPressed = e.altKey;\n\n\t\t\tif (!(0, _BrowserDetector.isFirefox)()) {\n\t\t\t\t// Don't emit hover in `dragenter` on Firefox due to an edge case.\n\t\t\t\t// If the target changes position as the result of `dragenter`, Firefox\n\t\t\t\t// will still happily dispatch `dragover` despite target being no longer\n\t\t\t\t// there. The easy solution is to only fire `hover` in `dragover` on FF.\n\t\t\t\tthis.actions.hover(dragEnterTargetIds, {\n\t\t\t\t\tclientOffset: (0, _OffsetUtils.getEventClientOffset)(e)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar canDrop = dragEnterTargetIds.some(function (targetId) {\n\t\t\t\treturn _this5.monitor.canDropOnTarget(targetId);\n\t\t\t});\n\n\t\t\tif (canDrop) {\n\t\t\t\t// IE requires this to fire dragover events\n\t\t\t\te.preventDefault();\n\t\t\t\te.dataTransfer.dropEffect = this.getCurrentDropEffect();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'handleTopDragOverCapture',\n\t\tvalue: function handleTopDragOverCapture() {\n\t\t\tthis.dragOverTargetIds = [];\n\t\t}\n\t}, {\n\t\tkey: 'handleDragOver',\n\t\tvalue: function handleDragOver(e, targetId) {\n\t\t\tthis.dragOverTargetIds.unshift(targetId);\n\t\t}\n\t}, {\n\t\tkey: 'handleTopDragOver',\n\t\tvalue: function handleTopDragOver(e) {\n\t\t\tvar _this6 = this;\n\n\t\t\tvar dragOverTargetIds = this.dragOverTargetIds;\n\n\t\t\tthis.dragOverTargetIds = [];\n\n\t\t\tif (!this.monitor.isDragging()) {\n\t\t\t\t// This is probably a native item type we don't understand.\n\t\t\t\t// Prevent default \"drop and blow away the whole document\" action.\n\t\t\t\te.preventDefault();\n\t\t\t\te.dataTransfer.dropEffect = 'none';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.altKeyPressed = e.altKey;\n\n\t\t\tthis.actions.hover(dragOverTargetIds, {\n\t\t\t\tclientOffset: (0, _OffsetUtils.getEventClientOffset)(e)\n\t\t\t});\n\n\t\t\tvar canDrop = dragOverTargetIds.some(function (targetId) {\n\t\t\t\treturn _this6.monitor.canDropOnTarget(targetId);\n\t\t\t});\n\n\t\t\tif (canDrop) {\n\t\t\t\t// Show user-specified drop effect.\n\t\t\t\te.preventDefault();\n\t\t\t\te.dataTransfer.dropEffect = this.getCurrentDropEffect();\n\t\t\t} else if (this.isDraggingNativeItem()) {\n\t\t\t\t// Don't show a nice cursor but still prevent default\n\t\t\t\t// \"drop and blow away the whole document\" action.\n\t\t\t\te.preventDefault();\n\t\t\t\te.dataTransfer.dropEffect = 'none';\n\t\t\t} else if (this.checkIfCurrentDragSourceRectChanged()) {\n\t\t\t\t// Prevent animating to incorrect position.\n\t\t\t\t// Drop effect must be other than 'none' to prevent animation.\n\t\t\t\te.preventDefault();\n\t\t\t\te.dataTransfer.dropEffect = 'move';\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'handleTopDragLeaveCapture',\n\t\tvalue: function handleTopDragLeaveCapture(e) {\n\t\t\tif (this.isDraggingNativeItem()) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\n\t\t\tvar isLastLeave = this.enterLeaveCounter.leave(e.target);\n\t\t\tif (!isLastLeave) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isDraggingNativeItem()) {\n\t\t\t\tthis.endDragNativeItem();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'handleTopDropCapture',\n\t\tvalue: function handleTopDropCapture(e) {\n\t\t\tthis.dropTargetIds = [];\n\t\t\te.preventDefault();\n\n\t\t\tif (this.isDraggingNativeItem()) {\n\t\t\t\tthis.currentNativeSource.mutateItemByReadingDataTransfer(e.dataTransfer);\n\t\t\t}\n\n\t\t\tthis.enterLeaveCounter.reset();\n\t\t}\n\t}, {\n\t\tkey: 'handleDrop',\n\t\tvalue: function handleDrop(e, targetId) {\n\t\t\tthis.dropTargetIds.unshift(targetId);\n\t\t}\n\t}, {\n\t\tkey: 'handleTopDrop',\n\t\tvalue: function handleTopDrop(e) {\n\t\t\tvar dropTargetIds = this.dropTargetIds;\n\n\t\t\tthis.dropTargetIds = [];\n\n\t\t\tthis.actions.hover(dropTargetIds, {\n\t\t\t\tclientOffset: (0, _OffsetUtils.getEventClientOffset)(e)\n\t\t\t});\n\t\t\tthis.actions.drop({ dropEffect: this.getCurrentDropEffect() });\n\n\t\t\tif (this.isDraggingNativeItem()) {\n\t\t\t\tthis.endDragNativeItem();\n\t\t\t} else {\n\t\t\t\tthis.endDragIfSourceWasRemovedFromDOM();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'handleSelectStart',\n\t\tvalue: function handleSelectStart(e) {\n\t\t\tvar target = e.target;\n\n\t\t\t// Only IE requires us to explicitly say\n\t\t\t// we want drag drop operation to start\n\n\t\t\tif (typeof target.dragDrop !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Inputs and textareas should be selectable\n\t\t\tif (target.tagName === 'INPUT' || target.tagName === 'SELECT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For other targets, ask IE\n\t\t\t// to enable drag and drop\n\t\t\te.preventDefault();\n\t\t\ttarget.dragDrop();\n\t\t}\n\t}, {\n\t\tkey: 'window',\n\t\tget: function get() {\n\t\t\tif (this.context && this.context.window) {\n\t\t\t\treturn this.context.window;\n\t\t\t} else if (typeof window !== 'undefined') {\n\t\t\t\treturn window;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\t}]);\n\n\treturn HTML5Backend;\n}();\n\nexports.default = HTML5Backend;"},"hash":"ff38702cc8e88aa6eb0d2619d68e770f"}