{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":7,"column":24}},{"name":"babel-runtime/helpers/objectWithoutProperties","loc":{"line":11,"column":40}},{"name":"react","loc":{"line":15,"column":21}},{"name":"warning","loc":{"line":19,"column":23}},{"name":"prop-types","loc":{"line":23,"column":25}},{"name":"../Input","loc":{"line":27,"column":21}},{"name":"../Form/FormControl","loc":{"line":31,"column":27}},{"name":"../Form/FormHelperText","loc":{"line":35,"column":30}},{"name":"../Select/Select","loc":{"line":39,"column":22}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Input = require('../Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _FormControl = require('../Form/FormControl');\n\nvar _FormControl2 = _interopRequireDefault(_FormControl);\n\nvar _FormHelperText = require('../Form/FormHelperText');\n\nvar _FormHelperText2 = _interopRequireDefault(_FormHelperText);\n\nvar _Select = require('../Select/Select');\n\nvar _Select2 = _interopRequireDefault(_Select);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n * - [FormControl](/api/form-control)\n * - [InputLabel](/api/input-label)\n * - [Input](/api/input)\n * - [FormHelperText](/api/form-helper-text)\n *\n * If you wish to alter the properties applied to the native input, you can do as follow:\n *\n * ```jsx\n * const InputProps = {\n *   inputProps: {\n *     step: 300,\n *   },\n * };\n *\n * return <TextField id=\"time\" type=\"time\" InputProps={InputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField and consider either:\n * - using the upper case props for passing values direct to the components.\n * - using the underlying components directly as shown in the demos.\n */\nfunction TextField(props) {\n  var autoComplete = props.autoComplete,\n      autoFocus = props.autoFocus,\n      children = props.children,\n      className = props.className,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      error = props.error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      fullWidth = props.fullWidth,\n      helperText = props.helperText,\n      helperTextClassName = props.helperTextClassName,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      labelClassName = props.labelClassName,\n      multiline = props.multiline,\n      name = props.name,\n      onChange = props.onChange,\n      placeholder = props.placeholder,\n      required = props.required,\n      rootRef = props.rootRef,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      select = props.select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      other = (0, _objectWithoutProperties3.default)(props, ['autoComplete', 'autoFocus', 'children', 'className', 'defaultValue', 'disabled', 'error', 'FormHelperTextProps', 'fullWidth', 'helperText', 'helperTextClassName', 'id', 'InputLabelProps', 'InputProps', 'inputRef', 'label', 'labelClassName', 'multiline', 'name', 'onChange', 'placeholder', 'required', 'rootRef', 'rows', 'rowsMax', 'select', 'SelectProps', 'type', 'value']);\n\n  \"development\" !== \"production\" ? (0, _warning2.default)(!select || Boolean(children), 'Material-UI: `children` must be passed when using the `TextField` component with `select`.') : void 0;\n\n  var InputComponent = _react2.default.createElement(_Input2.default, (0, _extends3.default)({\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    disabled: disabled,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onChange: onChange,\n    placeholder: placeholder\n  }, InputProps));\n\n  return _react2.default.createElement(_FormControl2.default, (0, _extends3.default)({\n    fullWidth: fullWidth,\n    className: className,\n    error: error,\n    required: required\n  }, other, {\n    ref: rootRef\n  }), label && _react2.default.createElement(_Input.InputLabel, (0, _extends3.default)({ htmlFor: id, className: labelClassName }, InputLabelProps), label), select ? _react2.default.createElement(_Select2.default, (0, _extends3.default)({ value: value, input: InputComponent }, SelectProps), children) : InputComponent, helperText && _react2.default.createElement(_FormHelperText2.default, (0, _extends3.default)({ className: helperTextClassName }, FormHelperTextProps), helperText));\n} // @inheritedComponent FormControl\n\nTextField.propTypes = \"development\" !== \"production\" ? {\n  /**\n   * This property helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusion, it's more like an autofill.\n   * You can learn about it with that article\n   * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n   */\n  autoComplete: _propTypes2.default.string,\n  /**\n   * If `true`, the input will be focused during the first mount.\n   */\n  autoFocus: _propTypes2.default.bool,\n  /**\n   * @ignore\n   */\n  children: _propTypes2.default.node,\n  /**\n   * @ignore\n   */\n  className: _propTypes2.default.string,\n  /**\n   * The default value of the `Input` element.\n   */\n  defaultValue: _propTypes2.default.string,\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: _propTypes2.default.bool,\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: _propTypes2.default.bool,\n  /**\n   * Properties applied to the `FormHelperText` element.\n   */\n  FormHelperTextProps: _propTypes2.default.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: _propTypes2.default.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: _propTypes2.default.node,\n  /**\n   * The CSS class name of the helper text element.\n   */\n  helperTextClassName: _propTypes2.default.string,\n  /**\n   * The id of the `input` element.\n   */\n  id: _propTypes2.default.string,\n  /**\n   * Properties applied to the `InputLabel` element.\n   */\n  InputLabelProps: _propTypes2.default.object,\n  /**\n   * Properties applied to the `Input` element.\n   */\n  InputProps: _propTypes2.default.object,\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: _propTypes2.default.func,\n  /**\n   * The label content.\n   */\n  label: _propTypes2.default.node,\n  /**\n   * The CSS class name of the label element.\n   */\n  labelClassName: _propTypes2.default.string,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: _propTypes2.default.oneOf(['none', 'dense', 'normal']),\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: _propTypes2.default.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: _propTypes2.default.string,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback\n   */\n  onChange: _propTypes2.default.func,\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: _propTypes2.default.string,\n  /**\n   * If `true`, the label is displayed as required.\n   */\n  required: _propTypes2.default.bool,\n  /**\n   * Use that property to pass a ref callback to the root component.\n   */\n  rootRef: _propTypes2.default.func,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  /**\n   * Render a `Select` element while passing the `Input` element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: _propTypes2.default.bool,\n  /**\n   * Properties applied to the `Select` element.\n   */\n  SelectProps: _propTypes2.default.object,\n  /**\n   * Type attribute of the `Input` element. It should be a valid HTML5 input type.\n   */\n  type: _propTypes2.default.string,\n  /**\n   * The value of the `Input` element, required for a controlled component.\n   */\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])\n} : {};\n\nTextField.defaultProps = {\n  required: false,\n  select: false\n};\n\nexports.default = TextField;"},"hash":"4caffa3463c63d28ffb9efdcfee3c09a"}