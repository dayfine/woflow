{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":8,"column":24}},{"name":"babel-runtime/helpers/objectWithoutProperties","loc":{"line":12,"column":40}},{"name":"babel-runtime/core-js/object/get-prototype-of","loc":{"line":16,"column":30}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":20,"column":31}},{"name":"babel-runtime/helpers/createClass","loc":{"line":24,"column":28}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":28,"column":42}},{"name":"babel-runtime/helpers/inherits","loc":{"line":32,"column":25}},{"name":"react","loc":{"line":36,"column":21}},{"name":"prop-types","loc":{"line":40,"column":25}},{"name":"react-event-listener","loc":{"line":44,"column":34}},{"name":"lodash/debounce","loc":{"line":48,"column":24}},{"name":"hoist-non-react-statics","loc":{"line":52,"column":36}},{"name":"recompose/wrapDisplayName","loc":{"line":56,"column":31}},{"name":"../styles/withTheme","loc":{"line":60,"column":25}},{"name":"../styles/createBreakpoints","loc":{"line":64,"column":33}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWidthDown = exports.isWidthUp = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactEventListener = require('react-event-listener');\n\nvar _reactEventListener2 = _interopRequireDefault(_reactEventListener);\n\nvar _debounce = require('lodash/debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nvar _hoistNonReactStatics = require('hoist-non-react-statics');\n\nvar _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);\n\nvar _wrapDisplayName = require('recompose/wrapDisplayName');\n\nvar _wrapDisplayName2 = _interopRequireDefault(_wrapDisplayName);\n\nvar _withTheme = require('../styles/withTheme');\n\nvar _withTheme2 = _interopRequireDefault(_withTheme);\n\nvar _createBreakpoints = require('../styles/createBreakpoints');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n// By default, returns true if screen width is the same or greater than the given breakpoint.\nvar isWidthUp = exports.isWidthUp = function isWidthUp(breakpoint, width) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (inclusive) {\n    return _createBreakpoints.keys.indexOf(breakpoint) <= _createBreakpoints.keys.indexOf(width);\n  }\n  return _createBreakpoints.keys.indexOf(breakpoint) < _createBreakpoints.keys.indexOf(width);\n};\n\n// By default, returns true if screen width is the same or less than the given breakpoint.\nvar isWidthDown = exports.isWidthDown = function isWidthDown(breakpoint, width) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (inclusive) {\n    return _createBreakpoints.keys.indexOf(width) <= _createBreakpoints.keys.indexOf(breakpoint);\n  }\n  return _createBreakpoints.keys.indexOf(width) < _createBreakpoints.keys.indexOf(breakpoint);\n};\n\nvar withWidth = function withWidth() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (Component) {\n    var _options$resizeInterv = options.resizeInterval,\n        resizeInterval = _options$resizeInterv === undefined ? 166 : _options$resizeInterv;\n\n    var Width = function (_React$Component) {\n      (0, _inherits3.default)(Width, _React$Component);\n\n      function Width() {\n        var _ref;\n\n        var _temp, _this, _ret;\n\n        (0, _classCallCheck3.default)(this, Width);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Width.__proto__ || (0, _getPrototypeOf2.default)(Width)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n          width: undefined\n        }, _this.handleResize = (0, _debounce2.default)(function () {\n          _this.updateWidth(window.innerWidth);\n        }, resizeInterval), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n      }\n\n      (0, _createClass3.default)(Width, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n          this.updateWidth(window.innerWidth);\n        }\n      }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n          this.handleResize.cancel();\n        }\n      }, {\n        key: 'updateWidth',\n        value: function updateWidth(innerWidth) {\n          if (this.props.theme) {\n            var breakpoints = this.props.theme.breakpoints;\n            var width = null;\n\n            /**\n             * Start with the slowest value as low end devices often have a small screen.\n             *\n             * innerWidth |xs      sm      md      lg      xl\n             *            |-------|-------|-------|-------|------>\n             * width      |  xs   |  sm   |  md   |  lg   |  xl\n             */\n            var index = 1;\n            while (width === null && index < _createBreakpoints.keys.length) {\n              var currentWidth = _createBreakpoints.keys[index];\n\n              // @media are inclusive, so reproduce the behavior here.\n              if (innerWidth < breakpoints.values[currentWidth]) {\n                width = _createBreakpoints.keys[index - 1];\n                break;\n              }\n\n              index += 1;\n            }\n\n            width = width || 'xl';\n\n            if (width !== this.state.width) {\n              this.setState({\n                width: width\n              });\n            }\n          }\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var _props = this.props,\n              initialWidth = _props.initialWidth,\n              theme = _props.theme,\n              width = _props.width,\n              other = (0, _objectWithoutProperties3.default)(_props, ['initialWidth', 'theme', 'width']);\n\n          var props = (0, _extends3.default)({\n            width: width || this.state.width || initialWidth\n          }, other);\n\n          // When rendering the component on the server,\n          // we have no idea about the client browser screen width.\n          // In order to prevent blinks and help the reconciliation of the React tree\n          // we are not rendering the child component.\n          //\n          // An alternative is to use the `initialWidth` property.\n          if (props.width === undefined) {\n            return null;\n          }\n\n          return _react2.default.createElement(_reactEventListener2.default, { target: 'window', onResize: this.handleResize }, _react2.default.createElement(Component, props));\n        }\n      }]);\n      return Width;\n    }(_react2.default.Component);\n\n    Width.propTypes = \"development\" !== \"production\" ? {\n      /**\n       * As `window.innerWidth` is unavailable on the server,\n       * we default to rendering an empty componenent during the first mount.\n       * In some situation you might want to use an heristic to approximate\n       * the screen width of the client browser screen width.\n       *\n       * For instance, you could be using the user-agent or the client-hints.\n       * http://caniuse.com/#search=client%20hint\n       */\n      initialWidth: _propTypes2.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n      /**\n       * @ignore,\n       */\n      theme: _propTypes2.default.object.isRequired,\n      /**\n       * Bypass the width calculation logic.\n       */\n      width: _propTypes2.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n    } : {};\n\n    if (\"development\" !== 'production') {\n      Width.displayName = (0, _wrapDisplayName2.default)(Component, 'withWidth');\n    }\n\n    (0, _hoistNonReactStatics2.default)(Width, Component);\n\n    return (0, _withTheme2.default)()(Width);\n  };\n};\n\nexports.default = withWidth;"},"hash":"3f004e810e9b6eae11927fe688f32773"}