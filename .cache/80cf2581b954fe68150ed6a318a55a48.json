{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":8,"column":24}},{"name":"babel-runtime/helpers/objectWithoutProperties","loc":{"line":12,"column":40}},{"name":"babel-runtime/core-js/object/get-prototype-of","loc":{"line":16,"column":30}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":20,"column":31}},{"name":"babel-runtime/helpers/createClass","loc":{"line":24,"column":28}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":28,"column":42}},{"name":"babel-runtime/helpers/inherits","loc":{"line":32,"column":25}},{"name":"react","loc":{"line":36,"column":21}},{"name":"prop-types","loc":{"line":40,"column":25}},{"name":"react-dom","loc":{"line":44,"column":24}},{"name":"warning","loc":{"line":48,"column":23}},{"name":"dom-helpers/query/contains","loc":{"line":52,"column":24}},{"name":"lodash/debounce","loc":{"line":56,"column":24}},{"name":"react-event-listener","loc":{"line":60,"column":34}},{"name":"../styles/withStyles","loc":{"line":64,"column":26}},{"name":"../Modal","loc":{"line":68,"column":21}},{"name":"../transitions/Grow","loc":{"line":72,"column":20}},{"name":"../Paper","loc":{"line":76,"column":21}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styles = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _contains = require('dom-helpers/query/contains');\n\nvar _contains2 = _interopRequireDefault(_contains);\n\nvar _debounce = require('lodash/debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nvar _reactEventListener = require('react-event-listener');\n\nvar _reactEventListener2 = _interopRequireDefault(_reactEventListener);\n\nvar _withStyles = require('../styles/withStyles');\n\nvar _withStyles2 = _interopRequireDefault(_withStyles);\n\nvar _Modal = require('../Modal');\n\nvar _Modal2 = _interopRequireDefault(_Modal);\n\nvar _Grow = require('../transitions/Grow');\n\nvar _Grow2 = _interopRequireDefault(_Grow);\n\nvar _Paper = require('../Paper');\n\nvar _Paper2 = _interopRequireDefault(_Paper);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction getOffsetTop(rect, vertical) {\n  var offset = 0;\n\n  if (typeof vertical === 'number') {\n    offset = vertical;\n  } else if (vertical === 'center') {\n    offset = rect.height / 2;\n  } else if (vertical === 'bottom') {\n    offset = rect.height;\n  }\n\n  return offset;\n} // @inheritedComponent Modal\n\nfunction getOffsetLeft(rect, horizontal) {\n  var offset = 0;\n\n  if (typeof horizontal === 'number') {\n    offset = horizontal;\n  } else if (horizontal === 'center') {\n    offset = rect.width / 2;\n  } else if (horizontal === 'right') {\n    offset = rect.width;\n  }\n\n  return offset;\n}\n\nfunction getTransformOriginValue(transformOrigin) {\n  return [transformOrigin.horizontal, transformOrigin.vertical].map(function (n) {\n    return typeof n === 'number' ? n + 'px' : n;\n  }).join(' ');\n}\n\n// Sum the scrollTop between two elements.\nfunction getScrollParent(parent, child) {\n  var element = child;\n  var scrollTop = 0;\n\n  while (element && element !== parent) {\n    element = element.parentNode;\n    scrollTop += element.scrollTop;\n  }\n  return scrollTop;\n}\n\nvar styles = exports.styles = {\n  paper: {\n    position: 'absolute',\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    // So we see the popover when it's empty.\n    // It's most likely on issue on userland.\n    minWidth: 16,\n    minHeight: 16,\n    maxWidth: 'calc(100vw - 32px)',\n    maxHeight: 'calc(100vh - 32px)',\n    '&:focus': {\n      outline: 'none'\n    }\n  }\n};\n\nvar Popover = function (_React$Component) {\n  (0, _inherits3.default)(Popover, _React$Component);\n\n  function Popover() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, Popover);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Popover.__proto__ || (0, _getPrototypeOf2.default)(Popover)).call.apply(_ref, [this].concat(args))), _this), _this.componentWillUnmount = function () {\n      _this.handleResize.cancel();\n    }, _this.setPositioningStyles = function (element) {\n      if (element && element.style) {\n        var positioning = _this.getPositioningStyle(element);\n\n        element.style.top = positioning.top;\n        element.style.left = positioning.left;\n        element.style.transformOrigin = positioning.transformOrigin;\n      }\n    }, _this.getPositioningStyle = function (element) {\n      var marginThreshold = _this.props.marginThreshold;\n\n      // Check if the parent has requested anchoring on an inner content node\n\n      var contentAnchorOffset = _this.getContentAnchorOffset(element);\n      // Get the offset of of the anchoring element\n      var anchorOffset = _this.getAnchorOffset(contentAnchorOffset);\n\n      var elemRect = {\n        width: element.clientWidth,\n        height: element.clientHeight\n      };\n      // Get the transform origin point on the element itself\n      var transformOrigin = _this.getTransformOrigin(elemRect, contentAnchorOffset);\n\n      // Calculate element positioning\n      var top = anchorOffset.top - transformOrigin.vertical;\n      var left = anchorOffset.left - transformOrigin.horizontal;\n      var bottom = top + elemRect.height;\n      var right = left + elemRect.width;\n\n      // Window thresholds taking required margin into account\n      var heightThreshold = window.innerHeight - marginThreshold;\n      var widthThreshold = window.innerWidth - marginThreshold;\n\n      // Check if the vertical axis needs shifting\n      if (top < marginThreshold) {\n        var diff = top - marginThreshold;\n        top -= diff;\n        transformOrigin.vertical += diff;\n      } else if (bottom > heightThreshold) {\n        var _diff = bottom - heightThreshold;\n        top -= _diff;\n        transformOrigin.vertical += _diff;\n      }\n\n      \"production\" !== \"production\" ? (0, _warning2.default)(elemRect.height < heightThreshold || !elemRect.height || !heightThreshold, ['Material-UI: the popover component is too tall.', 'Some part of it can not be seen on the screen (' + (elemRect.height - heightThreshold) + 'px).', 'Please consider adding a `max-height` to improve the user-experience.'].join('\\n')) : void 0;\n\n      // Check if the horizontal axis needs shifting\n      if (left < marginThreshold) {\n        var _diff2 = left - marginThreshold;\n        left -= _diff2;\n        transformOrigin.horizontal += _diff2;\n      } else if (right > widthThreshold) {\n        var _diff3 = right - widthThreshold;\n        left -= _diff3;\n        transformOrigin.horizontal += _diff3;\n      }\n\n      return {\n        top: top + 'px',\n        left: left + 'px',\n        transformOrigin: getTransformOriginValue(transformOrigin)\n      };\n    }, _this.transitionEl = undefined, _this.handleGetOffsetTop = getOffsetTop, _this.handleGetOffsetLeft = getOffsetLeft, _this.handleEnter = function (element) {\n      if (_this.props.onEnter) {\n        _this.props.onEnter(element);\n      }\n\n      _this.setPositioningStyles(element);\n    }, _this.handleResize = (0, _debounce2.default)(function () {\n      var element = _reactDom2.default.findDOMNode(_this.transitionEl);\n      _this.setPositioningStyles(element);\n    }, 166), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(Popover, [{\n    key: 'getAnchorOffset',\n\n    // Returns the top/left offset of the position\n    // to attach to on the anchor element (or body if none is provided)\n    value: function getAnchorOffset(contentAnchorOffset) {\n      var _props = this.props,\n          anchorEl = _props.anchorEl,\n          anchorOrigin = _props.anchorOrigin,\n          anchorReference = _props.anchorReference,\n          anchorPosition = _props.anchorPosition;\n\n      if (anchorReference === 'anchorPosition') {\n        return anchorPosition;\n      }\n\n      var anchorElement = anchorEl || document.body;\n      var anchorRect = anchorElement.getBoundingClientRect();\n      var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';\n\n      return {\n        top: anchorRect.top + this.handleGetOffsetTop(anchorRect, anchorVertical),\n        left: anchorRect.left + this.handleGetOffsetLeft(anchorRect, anchorOrigin.horizontal)\n      };\n    }\n\n    // Returns the vertical offset of inner content to anchor the transform on if provided\n\n  }, {\n    key: 'getContentAnchorOffset',\n    value: function getContentAnchorOffset(element) {\n      var _props2 = this.props,\n          getContentAnchorEl = _props2.getContentAnchorEl,\n          anchorReference = _props2.anchorReference;\n\n      var contentAnchorOffset = 0;\n\n      if (getContentAnchorEl && anchorReference === 'anchorEl') {\n        var contentAnchorEl = getContentAnchorEl(element);\n\n        if (contentAnchorEl && (0, _contains2.default)(element, contentAnchorEl)) {\n          var scrollTop = getScrollParent(element, contentAnchorEl);\n          contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;\n        }\n\n        // != the default value\n        \"production\" !== \"production\" ? (0, _warning2.default)(this.props.anchorOrigin.vertical === 'top', ['Material-UI: you can not change the default `anchorOrigin.vertical` value ', 'when also providing the `getContentAnchorEl` property to the popover component.', 'Only use one of the two properties.', 'Set `getContentAnchorEl` to null or left `anchorOrigin.vertical` unchanged.'].join('\\n')) : void 0;\n      }\n\n      return contentAnchorOffset;\n    }\n\n    // Return the base transform origin using the element\n    // and taking the content anchor offset into account if in use\n\n  }, {\n    key: 'getTransformOrigin',\n    value: function getTransformOrigin(elemRect) {\n      var contentAnchorOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var transformOrigin = this.props.transformOrigin;\n\n      return {\n        vertical: this.handleGetOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,\n        horizontal: this.handleGetOffsetLeft(elemRect, transformOrigin.horizontal)\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props3 = this.props,\n          anchorEl = _props3.anchorEl,\n          anchorOrigin = _props3.anchorOrigin,\n          anchorPosition = _props3.anchorPosition,\n          anchorReference = _props3.anchorReference,\n          children = _props3.children,\n          classes = _props3.classes,\n          elevation = _props3.elevation,\n          getContentAnchorEl = _props3.getContentAnchorEl,\n          marginThreshold = _props3.marginThreshold,\n          onEnter = _props3.onEnter,\n          onEntered = _props3.onEntered,\n          onEntering = _props3.onEntering,\n          onExit = _props3.onExit,\n          onExited = _props3.onExited,\n          onExiting = _props3.onExiting,\n          open = _props3.open,\n          PaperProps = _props3.PaperProps,\n          role = _props3.role,\n          transformOrigin = _props3.transformOrigin,\n          transitionClasses = _props3.transitionClasses,\n          transitionDuration = _props3.transitionDuration,\n          other = (0, _objectWithoutProperties3.default)(_props3, ['anchorEl', 'anchorOrigin', 'anchorPosition', 'anchorReference', 'children', 'classes', 'elevation', 'getContentAnchorEl', 'marginThreshold', 'onEnter', 'onEntered', 'onEntering', 'onExit', 'onExited', 'onExiting', 'open', 'PaperProps', 'role', 'transformOrigin', 'transitionClasses', 'transitionDuration']);\n\n      return _react2.default.createElement(_Modal2.default, (0, _extends3.default)({ show: open, BackdropInvisible: true }, other), _react2.default.createElement(_Grow2.default, {\n        appear: true,\n        'in': open,\n        onEnter: this.handleEnter,\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: onExited,\n        role: role,\n        transitionClasses: transitionClasses,\n        timeout: transitionDuration,\n        rootRef: function rootRef(node) {\n          _this2.transitionEl = node;\n        }\n      }, _react2.default.createElement(_Paper2.default, (0, _extends3.default)({\n        className: classes.paper,\n        elevation: elevation\n      }, PaperProps), _react2.default.createElement(_reactEventListener2.default, { target: 'window', onResize: this.handleResize }), children)));\n    }\n  }]);\n  return Popover;\n}(_react2.default.Component);\n\nPopover.propTypes = \"production\" !== \"production\" ? {\n  /**\n   * This is the DOM element that may be used\n   * to set the position of the popover.\n   */\n  anchorEl: _propTypes2.default.object,\n  /**\n   * This is the point on the anchor where the popover's\n   * `anchorEl` will attach to. This is not used when the\n   * anchorReference is 'anchorPosition'.\n   *\n   * Options:\n   * vertical: [top, center, bottom];\n   * horizontal: [left, center, right].\n   */\n  anchorOrigin: _propTypes2.default.shape({\n    horizontal: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['left', 'center', 'right'])]),\n    vertical: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['top', 'center', 'bottom'])])\n  }),\n  /**\n   * This is the position that may be used\n   * to set the position of the popover.\n   * The coordinates are relative to\n   * the application's client area.\n   */\n  anchorPosition: _propTypes2.default.shape({\n    top: _propTypes2.default.number,\n    left: _propTypes2.default.number\n  }),\n  /*\n   * This determines which anchor prop to refer to to set\n   * the position of the popover.\n   */\n  anchorReference: _propTypes2.default.oneOf(['anchorEl', 'anchorPosition']),\n  /**\n   * The content of the component.\n   */\n  children: _propTypes2.default.node,\n  /**\n   * Useful to extend the style applied to components.\n   */\n  classes: _propTypes2.default.object.isRequired,\n  /**\n   * The elevation of the popover.\n   */\n  elevation: _propTypes2.default.number,\n  /**\n   * This function is called in order to retrieve the content anchor element.\n   * It's the opposite of the `anchorEl` property.\n   * The content anchor element should be an element inside the popover.\n   * It's used to correctly scroll and set the position of the popover.\n   * The positioning strategy tries to make the content anchor element just above the\n   * anchor element.\n   */\n  getContentAnchorEl: _propTypes2.default.func,\n  /**\n   * Specifies how close to the edge of the window the popover can appear.\n   */\n  marginThreshold: _propTypes2.default.number,\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: _propTypes2.default.func,\n  /**\n   * Callback fired before the component is entering.\n   */\n  onEnter: _propTypes2.default.func,\n  /**\n   * Callback fired when the component has entered.\n   */\n  onEntered: _propTypes2.default.func,\n  /**\n   * Callback fired when the component is entering.\n   */\n  onEntering: _propTypes2.default.func,\n  /**\n   * Callback fired before the component is exiting.\n   */\n  onExit: _propTypes2.default.func,\n  /**\n   * Callback fired when the component has exited.\n   */\n  onExited: _propTypes2.default.func,\n  /**\n   * Callback fired when the component is exiting.\n   */\n  onExiting: _propTypes2.default.func,\n  /**\n   * If `true`, the popover is visible.\n   */\n  open: _propTypes2.default.bool,\n  /**\n   * Properties applied to the `Paper` element.\n   */\n  PaperProps: _propTypes2.default.object,\n  /**\n   * @ignore\n   */\n  role: _propTypes2.default.string,\n  /**\n   * This is the point on the popover which\n   * will attach to the anchor's origin.\n   *\n   * Options:\n   * vertical: [top, center, bottom, x(px)];\n   * horizontal: [left, center, right, x(px)].\n   */\n  transformOrigin: _propTypes2.default.shape({\n    horizontal: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['left', 'center', 'right'])]),\n    vertical: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['top', 'center', 'bottom'])])\n  }),\n  /**\n   * The animation classNames applied to the component as it enters or exits.\n   * This property is a direct binding to [`CSSTransition.classNames`](https://reactcommunity.org/react-transition-group/#CSSTransition-prop-classNames).\n   */\n  transitionClasses: _propTypes2.default.shape({\n    appear: _propTypes2.default.string,\n    appearActive: _propTypes2.default.string,\n    enter: _propTypes2.default.string,\n    enterActive: _propTypes2.default.string,\n    exit: _propTypes2.default.string,\n    exitActive: _propTypes2.default.string\n  }),\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   */\n  transitionDuration: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({ enter: _propTypes2.default.number, exit: _propTypes2.default.number }), _propTypes2.default.oneOf(['auto'])])\n} : {};\n\nPopover.defaultProps = {\n  anchorReference: 'anchorEl',\n  anchorOrigin: {\n    vertical: 'top',\n    horizontal: 'left'\n  },\n  elevation: 8,\n  marginThreshold: 16,\n  transformOrigin: {\n    vertical: 'top',\n    horizontal: 'left'\n  },\n  transitionDuration: 'auto'\n};\n\nexports.default = (0, _withStyles2.default)(styles, { name: 'MuiPopover' })(Popover);"},"hash":"428b58aefa935319625ccd2a6fef935b"}