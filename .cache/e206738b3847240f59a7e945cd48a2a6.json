{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":8,"column":24}},{"name":"babel-runtime/helpers/objectWithoutProperties","loc":{"line":12,"column":40}},{"name":"react","loc":{"line":16,"column":21}},{"name":"prop-types","loc":{"line":20,"column":25}},{"name":"warning","loc":{"line":24,"column":23}},{"name":"./SelectInput","loc":{"line":28,"column":27}},{"name":"../styles/withStyles","loc":{"line":32,"column":26}},{"name":"../Input","loc":{"line":36,"column":21}},{"name":"../utils/reactHelpers","loc":{"line":40,"column":28}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styles = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _SelectInput = require('./SelectInput');\n\nvar _SelectInput2 = _interopRequireDefault(_SelectInput);\n\nvar _withStyles = require('../styles/withStyles');\n\nvar _withStyles2 = _interopRequireDefault(_withStyles);\n\nvar _Input = require('../Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _reactHelpers = require('../utils/reactHelpers');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar styles = exports.styles = function styles(theme) {\n  return {\n    root: {\n      position: 'relative',\n      width: '100%'\n    },\n    select: {\n      '-moz-appearance': 'none', // Remove Firefox custom style\n      '-webkit-appearance': 'none', // Fix SSR issue\n      appearance: 'none', // Reset\n      // When interacting quickly, the text can end up selected.\n      // Native select can't be selected either.\n      userSelect: 'none',\n      padding: '0 ' + theme.spacing.unit * 4 + 'px 2px 0',\n      width: 'calc(100% - ' + theme.spacing.unit * 4 + 'px)',\n      minWidth: theme.spacing.unit * 2, // So it doesn't collapse.\n      height: 'calc(1em + ' + (theme.spacing.unit * 2 - 2) + 'px)',\n      cursor: 'pointer',\n      '&:focus': {\n        // Show that it's not an text input\n        background: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',\n        borderRadius: 0 // Reset Chrome style\n      },\n      // Remove Firefox focus border\n      '&:-moz-focusring': {\n        color: 'transparent',\n        textShadow: '0 0 0 #000'\n      },\n      // Remove IE11 arrow\n      '&::-ms-expand': {\n        display: 'none'\n      }\n    },\n    selectMenu: {\n      width: 'auto', // Fix Safari textOverflow\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      lineHeight: 'calc(1em + ' + (theme.spacing.unit * 2 - 2) + 'px)'\n    },\n    disabled: {\n      cursor: 'default'\n    },\n    icon: {\n      position: 'absolute',\n      right: 0,\n      top: 4,\n      color: theme.palette.text.secondary,\n      'pointer-events': 'none' // Don't block pinter events on the select under the icon.\n    }\n  };\n}; // Import to enforce the CSS injection order\n// @inheritedComponent Input\n\nfunction Select(props) {\n  var autoWidth = props.autoWidth,\n      children = props.children,\n      classes = props.classes,\n      displayEmpty = props.displayEmpty,\n      input = props.input,\n      MenuProps = props.MenuProps,\n      multiple = props.multiple,\n      native = props.native,\n      renderValue = props.renderValue,\n      other = (0, _objectWithoutProperties3.default)(props, ['autoWidth', 'children', 'classes', 'displayEmpty', 'input', 'MenuProps', 'multiple', 'native', 'renderValue']);\n\n  // Instead of `Element<typeof Input>` to have more flexibility.\n\n  \"production\" !== \"production\" ? (0, _warning2.default)((0, _reactHelpers.isMuiElement)(input, ['Input']), ['Material-UI: you have provided an invalid value to the `input` property.', 'We expect an element instance of the `Input` component.'].join('\\n')) : void 0;\n\n  return _react2.default.cloneElement(input, (0, _extends3.default)({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: _SelectInput2.default\n  }, other, {\n    inputProps: (0, _extends3.default)({}, input ? input.props.inputProps : {}, {\n      autoWidth: autoWidth,\n      children: children,\n      classes: classes,\n      displayEmpty: displayEmpty,\n      native: native,\n      multiple: multiple,\n      MenuProps: MenuProps,\n      renderValue: renderValue\n    })\n  }));\n}\n\nSelect.propTypes = \"production\" !== \"production\" ? {\n  /**\n   * If true, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: _propTypes2.default.bool,\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   */\n  children: _propTypes2.default.node,\n  /**\n   * Useful to extend the style applied to components.\n   */\n  classes: _propTypes2.default.object.isRequired,\n  /**\n   * If `true`, the selected item is displayed even if its value is empty.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  displayEmpty: _propTypes2.default.bool,\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: _propTypes2.default.element,\n  /**\n   * Properties applied to the `Menu` element.\n   */\n  MenuProps: _propTypes2.default.object,\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  multiple: _propTypes2.default.bool,\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: _propTypes2.default.bool,\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  renderValue: _propTypes2.default.func,\n  /**\n   * The input value, required for a controlled component.\n   */\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))])\n} : {};\n\nSelect.defaultProps = {\n  autoWidth: false,\n  displayEmpty: false,\n  input: _react2.default.createElement(_Input2.default, null),\n  multiple: false,\n  native: false\n};\n\nSelect.muiName = 'Select';\n\nexports.default = (0, _withStyles2.default)(styles, { name: 'MuiSelect' })(Select);"},"hash":"74fbe34b03593c433264ee495638fcc3"}