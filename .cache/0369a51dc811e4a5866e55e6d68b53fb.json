{"dependencies":[{"name":"warning","loc":{"line":7,"column":23}},{"name":"dom-helpers/query/isWindow","loc":{"line":11,"column":24}},{"name":"dom-helpers/ownerDocument","loc":{"line":15,"column":29}},{"name":"dom-helpers/util/inDOM","loc":{"line":19,"column":21}},{"name":"dom-helpers/util/scrollbarSize","loc":{"line":23,"column":29}},{"name":"../utils/manageAriaHidden","loc":{"line":27,"column":32}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _isWindow = require('dom-helpers/query/isWindow');\n\nvar _isWindow2 = _interopRequireDefault(_isWindow);\n\nvar _ownerDocument = require('dom-helpers/ownerDocument');\n\nvar _ownerDocument2 = _interopRequireDefault(_ownerDocument);\n\nvar _inDOM = require('dom-helpers/util/inDOM');\n\nvar _inDOM2 = _interopRequireDefault(_inDOM);\n\nvar _scrollbarSize = require('dom-helpers/util/scrollbarSize');\n\nvar _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);\n\nvar _manageAriaHidden = require('../utils/manageAriaHidden');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n// Taken from https://github.com/react-bootstrap/react-overlays/blob/master/src/ModalManager.js\n\nfunction getPaddingRight(node) {\n  return parseInt(node.style.paddingRight || 0, 10);\n}\n\n// Do we have a scroll bar?\nfunction bodyIsOverflowing(node) {\n  var doc = (0, _ownerDocument2.default)(node);\n  var win = (0, _isWindow2.default)(doc);\n\n  // Takes in account potential non zero margin on the body.\n  var style = window.getComputedStyle(doc.body);\n  var marginLeft = parseInt(style.getPropertyValue('margin-left'), 10);\n  var marginRight = parseInt(style.getPropertyValue('margin-right'), 10);\n\n  return marginLeft + doc.body.clientWidth + marginRight < win.innerWidth;\n}\n\nfunction getContainer() {\n  var container = _inDOM2.default ? window.document.body : {};\n  \"production\" !== \"production\" ? (0, _warning2.default)(container !== null, '\\nMaterial-UI: you are most likely evaluating the code before the\\nbrowser has a chance to reach the <body>.\\nPlease move the import at the end of the <body>.\\n  ') : void 0;\n  return container;\n}\n/**\n * State management helper for modals/layers.\n * Simplified, but inspired by react-overlay's ModalManager class\n *\n * @internal Used by the Modal to ensure proper focus management.\n */\nfunction createModalManager() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$hideSiblingNodes = _ref.hideSiblingNodes,\n      hideSiblingNodes = _ref$hideSiblingNodes === undefined ? true : _ref$hideSiblingNodes;\n\n  var modals = [];\n\n  var prevOverflow = void 0;\n  var prevPaddings = [];\n\n  function add(modal) {\n    var container = getContainer();\n    var modalIdx = modals.indexOf(modal);\n\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n\n    modalIdx = modals.length;\n    modals.push(modal);\n\n    if (hideSiblingNodes) {\n      (0, _manageAriaHidden.hideSiblings)(container, modal.mountNode);\n    }\n\n    if (modals.length === 1) {\n      // Save our current overflow so we can revert\n      // back to it when all modals are closed!\n      prevOverflow = container.style.overflow;\n\n      if (bodyIsOverflowing(container)) {\n        prevPaddings = [getPaddingRight(container)];\n        var scrollbarSize = (0, _scrollbarSize2.default)();\n        container.style.paddingRight = prevPaddings[0] + scrollbarSize + 'px';\n\n        var fixedNodes = document.querySelectorAll('.mui-fixed');\n        for (var i = 0; i < fixedNodes.length; i += 1) {\n          var paddingRight = getPaddingRight(fixedNodes[i]);\n          prevPaddings.push(paddingRight);\n          fixedNodes[i].style.paddingRight = paddingRight + scrollbarSize + 'px';\n        }\n      }\n\n      container.style.overflow = 'hidden';\n    }\n\n    return modalIdx;\n  }\n\n  function remove(modal) {\n    var container = getContainer();\n    var modalIdx = modals.indexOf(modal);\n\n    if (modalIdx === -1) {\n      return modalIdx;\n    }\n\n    modals.splice(modalIdx, 1);\n\n    if (modals.length === 0) {\n      container.style.overflow = prevOverflow;\n      container.style.paddingRight = prevPaddings[0];\n\n      var fixedNodes = document.querySelectorAll('.mui-fixed');\n      for (var i = 0; i < fixedNodes.length; i += 1) {\n        fixedNodes[i].style.paddingRight = prevPaddings[i + 1] + 'px';\n      }\n\n      prevOverflow = undefined;\n      prevPaddings = [];\n      if (hideSiblingNodes) {\n        (0, _manageAriaHidden.showSiblings)(container, modal.mountNode);\n      }\n    } else if (hideSiblingNodes) {\n      // otherwise make sure the next top modal is visible to a SR\n      (0, _manageAriaHidden.ariaHidden)(false, modals[modals.length - 1].mountNode);\n    }\n\n    return modalIdx;\n  }\n\n  function isTopModal(modal) {\n    return !!modals.length && modals[modals.length - 1] === modal;\n  }\n\n  var modalManager = { add: add, remove: remove, isTopModal: isTopModal };\n\n  return modalManager;\n}\n\nexports.default = createModalManager;"},"hash":"ea70411501fcf46b9ec84e3d1c72a464"}