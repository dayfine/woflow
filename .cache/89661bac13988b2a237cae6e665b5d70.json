{"dependencies":[{"name":"invariant","loc":{"line":11,"column":25}},{"name":"lodash/isPlainObject","loc":{"line":15,"column":29}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n}();\n\nexports.default = createSourceFactory;\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ALLOWED_SPEC_METHODS = ['canDrag', 'beginDrag', 'isDragging', 'endDrag'];\nvar REQUIRED_SPEC_METHODS = ['beginDrag'];\n\nfunction createSourceFactory(spec) {\n  Object.keys(spec).forEach(function (key) {\n    (0, _invariant2.default)(ALLOWED_SPEC_METHODS.indexOf(key) > -1, 'Expected the drag source specification to only have ' + 'some of the following keys: %s. ' + 'Instead received a specification with an unexpected \"%s\" key. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', ALLOWED_SPEC_METHODS.join(', '), key);\n    (0, _invariant2.default)(typeof spec[key] === 'function', 'Expected %s in the drag source specification to be a function. ' + 'Instead received a specification with %s: %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', key, key, spec[key]);\n  });\n  REQUIRED_SPEC_METHODS.forEach(function (key) {\n    (0, _invariant2.default)(typeof spec[key] === 'function', 'Expected %s in the drag source specification to be a function. ' + 'Instead received a specification with %s: %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', key, key, spec[key]);\n  });\n\n  var Source = function () {\n    function Source(monitor) {\n      _classCallCheck(this, Source);\n\n      this.monitor = monitor;\n      this.props = null;\n      this.component = null;\n    }\n\n    _createClass(Source, [{\n      key: 'receiveProps',\n      value: function receiveProps(props) {\n        this.props = props;\n      }\n    }, {\n      key: 'receiveComponent',\n      value: function receiveComponent(component) {\n        this.component = component;\n      }\n    }, {\n      key: 'canDrag',\n      value: function canDrag() {\n        if (!spec.canDrag) {\n          return true;\n        }\n\n        return spec.canDrag(this.props, this.monitor);\n      }\n    }, {\n      key: 'isDragging',\n      value: function isDragging(globalMonitor, sourceId) {\n        if (!spec.isDragging) {\n          return sourceId === globalMonitor.getSourceId();\n        }\n\n        return spec.isDragging(this.props, this.monitor);\n      }\n    }, {\n      key: 'beginDrag',\n      value: function beginDrag() {\n        var item = spec.beginDrag(this.props, this.monitor, this.component);\n        if (\"production\" !== 'production') {\n          (0, _invariant2.default)((0, _isPlainObject2.default)(item), 'beginDrag() must return a plain object that represents the dragged item. ' + 'Instead received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', item);\n        }\n        return item;\n      }\n    }, {\n      key: 'endDrag',\n      value: function endDrag() {\n        if (!spec.endDrag) {\n          return;\n        }\n\n        spec.endDrag(this.props, this.monitor, this.component);\n      }\n    }]);\n\n    return Source;\n  }();\n\n  return function createSource(monitor) {\n    return new Source(monitor);\n  };\n}"},"hash":"4875c243a89073e41ee8492ce7b24cd5"}